install.packages("paralle")
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_chunk$set(echo = FALSE,
comment = NA,
warning = FALSE,
message = FALSE)
library(dplyr)
# Create dataset
data <- data.frame(
id=seq(1,60),
individual=paste( "Mister ", seq(1,60), sep=""),
value=sample( seq(10,100), 60, replace=T)
)
# ----- This section prepare a dataframe for labels ---- #
# Get the name and the y position of each label
label_data <- data
head(data)
# Create dataset
data <- data.frame(
id=seq(1,60),
individual=c(paste("Limpando os dados "),paste('Criando dados de treino')),
value=sample( seq(10,100), 60, replace=T)
)
head(data)
# Packages
sapply(c('knitr','kableExtra','mccr','lubridate','ggplot2','timetk','tidyquant','tibbletime','cowplot','plotly','recipes','rsample','ModelMetrics','pROC','DT','tidywoe','dplyr','DataExplorer','tidyr',"parallel","doParallel","foreach",'aws.s3'),
library,char = T)
suppressPackageStartupMessages(library(scorecard))
suppressPackageStartupMessages(library(tidyverse))
#### Carrega o pacote
crs = detectCores()
make.crs = makeCluster(crs)
make.crs = makeCluster(crs)
registerDoParallel(make.crs)
dados <- read.csv('DATA/7days_predictions_monitoramento.csv',
h=TRUE)
head(dados)
dados <- read.csv('DATA/predictions_monitoramento.csv',
h=TRUE)
### Selecionando os desfecgos apenas alta/óbito
dados <- dados %>% filter(!is.na(document.alta.motivo))
dados <- read.csv('DATA/predictions_monitoramento.csv',
h=TRUE)
head(dados)
dim(dados)
dados <- read.csv('DATA/predictions_monitoramento.csv',
h=TRUE)
### Selecionando os desfecgos apenas alta/óbito
dados <- dados %>% filter(!is.na(alta_motivo))
### Criando variável tempo em horas
dados$tempo <- dados$max_collect_timestamp.h.
### Criando variável da classe de predição
dados$prediction2 <-as.factor(ifelse(dados$probability>0.5,1,0))
### Selecionando as variáveis preditoras
varnms <-  !colnames(dados) %in% c("atendimento_id","entidade_id","last_coleta_vs","alta.data",
"probability","alta_motivo","max_collect_timestamp.h.","prediction2",
"tempo","ano_mes","alert_threshold")
vars <- dados[,varnms]
#### Formatando variável data_coleta para formato data
dados$last_coleta_vs <- as.Date(dados$last_coleta_vs,
format = "%Y-%m-%d",
origin = "2018-01-01")
### Criando variável ano_mes
dados$ano_mes <- strftime(dados$last_coleta_vs, "%Y-%m")
######## Separando dados por mês
#dados <- dados %>% filter(ano_mes == '2019-08')
dados$semana <- strftime(dados$last_coleta_vs, "%V")
# divisão semanal
sem1 = dados #%>% filter(semana == '31')
#kable(names(vars), col.names = 'Variáveis', caption = 'Variáveis preditoras utilizadas no modelo') %>%
#  kable_styling("striped", full_width = F,latex_options="hold_position") %>%
#  row_spec(0, bold = T, color = "white", background = "gray")
datatable(data.frame(names(vars)),
options = list(orderClasses = TRUE,searching = FALSE,paging = FALSE,ordering=FALSE,info=FALSE,
columnDefs = list(list(className = 'dt-center', targets = "_all"))),
colnames = c("Variáveis"),
rownames = F,
editable = FALSE,filter = "none",selection = "none",escape = FALSE)
iv_sem1 <- sem1 %>% select(-c("atendimento_id","entidade_id","last_coleta_vs","alta.data",
"probability","alta_motivo","max_collect_timestamp.h.",
"tempo","ano_mes","semana","alert_threshold"))
names(dados)
iv_sem1 <- sem1 %>% select(-c("atendimento_id","entidade_id","last_coleta_vs","alta_data",
"probability","alta_motivo","max_collect_timestamp.h.",
"tempo","ano_mes","semana","alert_threshold"))
##############################################################
iv_sem1 <-  iv(iv_sem1, y = 'prediction2') %>%
as_tibble() %>%
mutate( info_value = round(info_value, 3) ) %>%
arrange( variable )
iv_sem1 <- arrange(iv_sem1,
desc(info_value))
########### Tab
datatable(cbind(iv_sem1),
options = list(orderClasses = TRUE,searching = FALSE,paging = FALSE,ordering=FALSE,info=FALSE,
columnDefs = list(list(className = 'dt-center', targets = "_all"))),
colnames = c("Variável preditora","IV"),
rownames = F,
editable = FALSE,filter = "none",selection = "none",escape = FALSE)
roc_sem1 <- roc(sem1$alta_motivo, sem1$probability)
roc_pc = coords(roc_sem1,input = "threshold",x = "best")[1]
pred_est = ifelse(sem1$probability>roc_pc$threshold,1,0)
ac_sem1 <- mean(pred_est == sem1$alta_motivo)
sem1$pred_est = pred_est
### Matrizes de confusão
t_sem1<-confusionMatrix(sem1$alta_motivo, pred_est)
probp.5 = ifelse(sem1$probability > dados$alert_threshold[1],1,0)
sem1$probp.5 =probp.5
t_sem.5<-confusionMatrix(sem1$alta_motivo,probp.5)
ac_sem.5 <- mean(probp.5 == sem1$alta_motivo)
tn_sem1 <- t_sem1[1]
fp_sem1 <- t_sem1[2]
fn_sem1 <- t_sem1[3]
tp_sem1 <- t_sem1[4]
#########
tn_sem.5 <- t_sem.5[1]
fp_sem.5 <- t_sem.5[2]
fn_sem.5 <- t_sem.5[3]
tp_sem.5 <- t_sem.5[4]
esp_sem1 <- tn_sem1/(tn_sem1+fp_sem1)
sen_sem1 <- tp_sem1/(tp_sem1+fn_sem1)
vpp_sem1 <- tp_sem1/(tp_sem1+fp_sem1)
vpn_sem1 <- tn_sem1/(tn_sem1+fn_sem1)
F1_sem1 <- 2*((vpp_sem1*sen_sem1)/(vpp_sem1 + sen_sem1))
esp_sem.5 <- tn_sem.5/(tn_sem.5+fp_sem.5)
sen_sem.5 <- tp_sem.5/(tp_sem.5+fn_sem.5)
vpp_sem.5 <- tp_sem.5/(tp_sem.5+fp_sem.5)
vpn_sem.5 <- tn_sem.5/(tn_sem.5+fn_sem.5)
F1_sem.5 <- 2*((vpp_sem.5*sen_sem.5)/(vpp_sem.5 + sen_sem.5))
## Calculando a AUCROC
##### Separando as distribuições de alta e óbito
sim_sem1 <- subset(sem1,sem1$alta_motivo==1)
nao_sem1 <- subset(sem1,sem1$alta_motivo==0)
# Aplicando o teste KS
sketch = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(class = 'dt-center',rowspan = 2, 'Métricas'),
th(class = 'dt-center',colspan = 2, 'Ponto de corte')
),
tr(
lapply(rep(c(paste0(roc_pc$threshold), paste0(dados$alert_threshold[1])), 1), th)
)
)
))
ks_sem1<-ks.test(sim_sem1$probability,nao_sem1$probability)
#### Valores em Tabela
tab_auc_ks <- data.frame(
AUCROC = c(round(roc_sem1$auc,3)),
KS = c(round(ks_sem1$stat,3)),
Acur = c(round(ac_sem1,3)),
Especificidade = c(round(esp_sem1,3)),
Sensibilidade = c(round(sen_sem1,3)),
vpp = c(round(vpp_sem1,3)),
vpn = c(round(vpn_sem1,3)),
Score_F1 = c(round(F1_sem1,3))
)
ks_sem1<-ks.test(sim_sem1$probability,nao_sem1$probability)
#### Valores em Tabela
tab_auc_ks <- data.frame(
AUCROC = c(round(roc_sem1$auc,3)),
KS = c(round(ks_sem1$stat,3)),
Acur = c(round(ac_sem1,3)),
Especificidade = c(round(esp_sem1,3)),
Sensibilidade = c(round(sen_sem1,3)),
vpp = c(round(vpp_sem1,3)),
vpn = c(round(vpn_sem1,3)),
Score_F1 = c(round(F1_sem1,3))
)
matconf = t(tab_auc_ks)
D2 = c(round(roc_sem1$auc,3),round(ks_sem1$stat,3),round(ac_sem.5,3),round(esp_sem.5,3),round(sen_sem.5,3),round(vpp_sem.5,3),round(vpn_sem.5,3),round(F1_sem.5,3))
matconf.51 = cbind(matconf,D2)
############# Tab
datatable(matconf.51,container = sketch,
options = list(orderClasses = TRUE,searching = FALSE,paging = FALSE,ordering=FALSE,info=FALSE,
columnDefs = list(list(className = 'dt-center', targets = "_all"))),
colnames = c("Métricas",as.character(round(roc_pc$threshold,3)),"0.5"),
rownames = c("AUCROC","KS","Acurácia","Especificidade","Sensibilidade","Valor preditivo positivo","Valor preditivo negativo","Score F1"),
editable = FALSE,filter = "none",selection = "none",escape = FALSE)
# Selecionando quem é óbito e quem é alta
sim<-subset(sem1,sem1$alta_motivo==1)
nao<-subset(sem1,sem1$alta_motivo==0)
# Aplicando o teste
ks<-ks.test(sim$probability,nao$probability)
dados_p <- dados %>% filter(!is.na(ano_mes))
dados_p$alta_motivo <- as.factor(dados_p$alta_motivo)
levels(dados_p$alta_motivo) <- c('Alta','Óbito')
dens_sem1 <- ggplot(dados_p, aes(probability, fill = as.factor(alta_motivo), colour = as.factor(alta_motivo))) +
geom_density(alpha = 0.3) +
#facet_wrap(~ ano_mes, ncol=3) +
theme_tq() +
labs(title = "",caption = "Laura::Data Science")  + xlab("Probabilidade") + ylab("Densidade") +
theme(legend.title=element_blank()) #+
dens_sem1 <- dens_sem1 + scale_color_manual(values = c("#d07530", "#434343")) #+
dens_sem1_title <- ggdraw() #+
plot_grid(dens_sem1_title, dens_sem1, ncol = 1, rel_heights = c(0.1, 1, 1))
install.packages('bookdown')
names(dados)
dados$pa_sistolica[is.na(dados$pa_sistolica.t.)] <- 0
dados$freq_cardiaca[is.na(dados$freq_cardiaca.t.)] <- 0
dados$freq_respiratoria[is.na(dados$freq_respiratoria.t.)] <- 0
dados$temperatura[is.na(dados$temperatura.t.)] <- 0
mews_pa_sistolica <- function(pa_sistolica.t.){
sapply(pa_sistolica.t., function(x) if (x == 0) 0 else if (x <= 70) 3 else if (x <= 80) 2 else if (x <= 100) 1 else if (x < 200) 0 else 0)
}
mews_freq_cardiaca <- function(freq_cardiaca.t.){
sapply(freq_cardiaca.t., function(x) if (x == 0) 0 else if (x <= 40) 2 else if (x <= 50) 1 else if (x <= 100) 0 else if (x <= 110) 1  else if (x < 130) 2 else 3)
}
mews_freq_respiratoria <- function(freq_respiratoria.t.){
sapply(freq_respiratoria.t., function(x) if (x == 0) 0 else if (x < 9) 2 else if (x <= 14) 0 else if (x <= 20) 1 else if (x < 30) 2 else 3)
}
mews_temperatura <- function(temperatura.t.){
sapply(temperatura.t., function(x) if (x == 0) 0 else if (x < 35) 2 else if (x <= 38.4) 0  else 2)
}
pa_sistolica_score <- mews_pa_sistolica(dados$pa_sistolica.t.)
head(dados$pa_sistolica.t.)
summary(dados$pa_sistolica.t.)
dados$pa_sistolica.t.[is.na(dados$pa_sistolica.t.)] <- 0
dados$freq_cardiaca.t.[is.na(dados$freq_cardiaca.t.)] <- 0
dados$freq_respiratoria.t.[is.na(dados$freq_respiratoria.t.)] <- 0
dados$temperatura.t.[is.na(dados$temperatura.t.)] <- 0
mews_pa_sistolica <- function(pa_sistolica.t.){
sapply(pa_sistolica.t., function(x) if (x == 0) 0 else if (x <= 70) 3 else if (x <= 80) 2 else if (x <= 100) 1 else if (x < 200) 0 else 0)
}
mews_freq_cardiaca <- function(freq_cardiaca.t.){
sapply(freq_cardiaca.t., function(x) if (x == 0) 0 else if (x <= 40) 2 else if (x <= 50) 1 else if (x <= 100) 0 else if (x <= 110) 1  else if (x < 130) 2 else 3)
}
mews_freq_respiratoria <- function(freq_respiratoria.t.){
sapply(freq_respiratoria.t., function(x) if (x == 0) 0 else if (x < 9) 2 else if (x <= 14) 0 else if (x <= 20) 1 else if (x < 30) 2 else 3)
}
mews_temperatura <- function(temperatura.t.){
sapply(temperatura.t., function(x) if (x == 0) 0 else if (x < 35) 2 else if (x <= 38.4) 0  else 2)
}
pa_sistolica_score <- mews_pa_sistolica(dados$pa_sistolica.t.)
freq_cardiaca_score <- mews_freq_cardiaca(dados$freq_cardiaca.t.)
freq_respiratoria_score <- mews_freq_respiratoria(dados$freq_respiratoria.t.)
temperatura_score <- mews_temperatura(dados$temperatura.t.)
dados$mews_score <- pa_sistolica_score + freq_cardiaca_score + freq_respiratoria_score + temperatura_score
names(dados)
head(dados[,c(5,88)])
tail(dados[,c(5,88)])
head(dados)
#### Matriz de confusão MEWS
dados$pred_mews<-ifelse(dados$mews_score>=3,1,0)
t1_mews <- confusion.matrix(dados$alta_motivo, dados$pred_mews)
library(SDMTools)
install.packages('SDMTools')
devtools::install_github("jjvanderwal/SDMTools")
#### Matriz de confusão MEWS
library(SDMTools) ## Para instalar devtools::install_github("jjvanderwal/SDMTools")
dados$pred_mews<-ifelse(dados$mews_score>=3,1,0)
t1_mews <- confusion.matrix(dados$alta_motivo, dados$pred_mews)
tn_mews <- t1_mews[1]
fp_mews <- t1_mews[2]
fn_mews <- t1_mews[3]
tp_mews <- t1_mews[4]
tpr_mews  <-  tp_mews / (tp_mews + fn_mews)
fpr_mews  <-  fp_mews / (fp_mews + tn_mews)
tnr_mews  <-  tn_mews / (tn_mews + fp_mews)
fnr_mews  <-  fn_mews / (fn_mews + tp_mews)
tpr_mews
fpr_mews
tnr_mews
fnr_mews
# Aplicando o teste KS
sketch = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(class = 'dt-center',rowspan = 2, 'Métricas'),
th(class = 'dt-center',colspan = 2, 'Ponto de corte')
),
tr(
lapply(rep(c(paste0(roc_pc$threshold), paste0(dados$alert_threshold[1]),'Mews'), 1), th)
)
)
))
ks_sem1<-ks.test(sim_sem1$probability,nao_sem1$probability)
#### Valores em Tabela
tab_auc_ks <- data.frame(
AUCROC = c(round(roc_sem1$auc,3)),
KS = c(round(ks_sem1$stat,3)),
Acur = c(round(ac_sem1,3)),
Especificidade = c(round(esp_sem1,3)),
Sensibilidade = c(round(sen_sem1,3)),
vpp = c(round(vpp_sem1,3)),
vpn = c(round(vpn_sem1,3)),
Score_F1 = c(round(F1_sem1,3))
)
matconf = t(tab_auc_ks)
D2 = c(round(roc_sem1$auc,3),round(ks_sem1$stat,3),round(ac_sem.5,3),round(esp_sem.5,3),round(sen_sem.5,3),round(vpp_sem.5,3),round(vpn_sem.5,3),round(F1_sem.5,3))
matconf.51 = cbind(matconf,D2)
############# Tab
datatable(matconf.51,container = sketch,
options = list(orderClasses = TRUE,searching = FALSE,paging = FALSE,ordering=FALSE,info=FALSE,
columnDefs = list(list(className = 'dt-center', targets = "_all"))),
colnames = c("Métricas",as.character(round(roc_pc$threshold,3)),"0.5"),
rownames = c("AUCROC","KS","Acurácia","Especificidade","Sensibilidade","Valor preditivo positivo","Valor preditivo negativo","Score F1"),
editable = FALSE,filter = "none",selection = "none",escape = FALSE)
D2
tpr_mews
tnr_mews
esp_mews <- tn_mews/(tn_mews+fp_mews)
esp_mews
esp_mews <- tn_mews/(tn_mews+fp_mews)
sen_mews <- tp_mews/(tp_mews+fn_mews)
vpp_mews <- tp_mews/(tp_mews+fp_mews)
vpn_mews <- tn_mews/(tn_mews+fn_mews)
F1_mews <- 2*((vpp_mews*sen_mews)/(vpp_mews + sen_mews))
F1_mews
tab_auc_ks
tab_auc_ks
matconf.51
ac_mews <- (tp_mews + tn_mews)/(tp_mews + tn_mews + fp_mews + fn_mews)
ac_mews
D3 <- c(NA,NA,round(ac_mews,3),round(esp_mews,3),round(sen_mews,3),round(vpp_mews,3),round(vpn_mews,3),round(F1_mews,3))
D3
matconf.51 = cbind(matconf,D2,D3)
matconf.51
############# Tab
datatable(matconf.51,container = sketch,
options = list(orderClasses = TRUE,searching = FALSE,paging = FALSE,ordering=FALSE,info=FALSE,
columnDefs = list(list(className = 'dt-center', targets = "_all"))),
colnames = c("Métricas",as.character(round(roc_pc$threshold,3)),"0.5"),
rownames = c("AUCROC","KS","Acurácia","Especificidade","Sensibilidade","Valor preditivo positivo","Valor preditivo negativo","Score F1"),
editable = FALSE,filter = "none",selection = "none",escape = FALSE)
str(dados)
setwd("~/Documentos/UTFPR/Extensão_ML/Slides")
ls()
rm(list=ls())
getwd()
setwd("~/ML")
library(rmarkdown)
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
2020-1996
24/40
24/27
getwd()
render_site()
render_site()
render_site()
getwd()
