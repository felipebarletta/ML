probp.5 = ifelse(sem1$probability > dados$alert_threshold[1],1,0)
sem1$probp.5 =probp.5
t_sem.5<-confusionMatrix(sem1$alta_motivo,probp.5)
ac_sem.5 <- mean(probp.5 == sem1$alta_motivo)
tn_sem1 <- t_sem1[1]
fp_sem1 <- t_sem1[2]
fn_sem1 <- t_sem1[3]
tp_sem1 <- t_sem1[4]
#########
tn_sem.5 <- t_sem.5[1]
fp_sem.5 <- t_sem.5[2]
fn_sem.5 <- t_sem.5[3]
tp_sem.5 <- t_sem.5[4]
esp_sem1 <- tn_sem1/(tn_sem1+fp_sem1)
sen_sem1 <- tp_sem1/(tp_sem1+fn_sem1)
vpp_sem1 <- tp_sem1/(tp_sem1+fp_sem1)
vpn_sem1 <- tn_sem1/(tn_sem1+fn_sem1)
F1_sem1 <- 2*((vpp_sem1*sen_sem1)/(vpp_sem1 + sen_sem1))
esp_sem.5 <- tn_sem.5/(tn_sem.5+fp_sem.5)
sen_sem.5 <- tp_sem.5/(tp_sem.5+fn_sem.5)
vpp_sem.5 <- tp_sem.5/(tp_sem.5+fp_sem.5)
vpn_sem.5 <- tn_sem.5/(tn_sem.5+fn_sem.5)
F1_sem.5 <- 2*((vpp_sem.5*sen_sem.5)/(vpp_sem.5 + sen_sem.5))
## Calculando a AUCROC
##### Separando as distribuições de alta e óbito
sim_sem1 <- subset(sem1,sem1$alta_motivo==1)
nao_sem1 <- subset(sem1,sem1$alta_motivo==0)
# Aplicando o teste KS
sketch = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(class = 'dt-center',rowspan = 2, 'Métricas'),
th(class = 'dt-center',colspan = 2, 'Ponto de corte')
),
tr(
lapply(rep(c(paste0(roc_pc$threshold), paste0(dados$alert_threshold[1])), 1), th)
)
)
))
ks_sem1<-ks.test(sim_sem1$probability,nao_sem1$probability)
#### Valores em Tabela
tab_auc_ks <- data.frame(
AUCROC = c(round(roc_sem1$auc,3)),
KS = c(round(ks_sem1$stat,3)),
Acur = c(round(ac_sem1,3)),
Especificidade = c(round(esp_sem1,3)),
Sensibilidade = c(round(sen_sem1,3)),
vpp = c(round(vpp_sem1,3)),
vpn = c(round(vpn_sem1,3)),
Score_F1 = c(round(F1_sem1,3))
)
ks_sem1<-ks.test(sim_sem1$probability,nao_sem1$probability)
#### Valores em Tabela
tab_auc_ks <- data.frame(
AUCROC = c(round(roc_sem1$auc,3)),
KS = c(round(ks_sem1$stat,3)),
Acur = c(round(ac_sem1,3)),
Especificidade = c(round(esp_sem1,3)),
Sensibilidade = c(round(sen_sem1,3)),
vpp = c(round(vpp_sem1,3)),
vpn = c(round(vpn_sem1,3)),
Score_F1 = c(round(F1_sem1,3))
)
matconf = t(tab_auc_ks)
D2 = c(round(roc_sem1$auc,3),round(ks_sem1$stat,3),round(ac_sem.5,3),round(esp_sem.5,3),round(sen_sem.5,3),round(vpp_sem.5,3),round(vpn_sem.5,3),round(F1_sem.5,3))
matconf.51 = cbind(matconf,D2)
############# Tab
datatable(matconf.51,container = sketch,
options = list(orderClasses = TRUE,searching = FALSE,paging = FALSE,ordering=FALSE,info=FALSE,
columnDefs = list(list(className = 'dt-center', targets = "_all"))),
colnames = c("Métricas",as.character(round(roc_pc$threshold,3)),"0.5"),
rownames = c("AUCROC","KS","Acurácia","Especificidade","Sensibilidade","Valor preditivo positivo","Valor preditivo negativo","Score F1"),
editable = FALSE,filter = "none",selection = "none",escape = FALSE)
# Selecionando quem é óbito e quem é alta
sim<-subset(sem1,sem1$alta_motivo==1)
nao<-subset(sem1,sem1$alta_motivo==0)
# Aplicando o teste
ks<-ks.test(sim$probability,nao$probability)
dados_p <- dados %>% filter(!is.na(ano_mes))
dados_p$alta_motivo <- as.factor(dados_p$alta_motivo)
levels(dados_p$alta_motivo) <- c('Alta','Óbito')
dens_sem1 <- ggplot(dados_p, aes(probability, fill = as.factor(alta_motivo), colour = as.factor(alta_motivo))) +
geom_density(alpha = 0.3) +
#facet_wrap(~ ano_mes, ncol=3) +
theme_tq() +
labs(title = "",caption = "Laura::Data Science")  + xlab("Probabilidade") + ylab("Densidade") +
theme(legend.title=element_blank()) #+
dens_sem1 <- dens_sem1 + scale_color_manual(values = c("#d07530", "#434343")) #+
dens_sem1_title <- ggdraw() #+
plot_grid(dens_sem1_title, dens_sem1, ncol = 1, rel_heights = c(0.1, 1, 1))
install.packages('bookdown')
names(dados)
dados$pa_sistolica[is.na(dados$pa_sistolica.t.)] <- 0
dados$freq_cardiaca[is.na(dados$freq_cardiaca.t.)] <- 0
dados$freq_respiratoria[is.na(dados$freq_respiratoria.t.)] <- 0
dados$temperatura[is.na(dados$temperatura.t.)] <- 0
mews_pa_sistolica <- function(pa_sistolica.t.){
sapply(pa_sistolica.t., function(x) if (x == 0) 0 else if (x <= 70) 3 else if (x <= 80) 2 else if (x <= 100) 1 else if (x < 200) 0 else 0)
}
mews_freq_cardiaca <- function(freq_cardiaca.t.){
sapply(freq_cardiaca.t., function(x) if (x == 0) 0 else if (x <= 40) 2 else if (x <= 50) 1 else if (x <= 100) 0 else if (x <= 110) 1  else if (x < 130) 2 else 3)
}
mews_freq_respiratoria <- function(freq_respiratoria.t.){
sapply(freq_respiratoria.t., function(x) if (x == 0) 0 else if (x < 9) 2 else if (x <= 14) 0 else if (x <= 20) 1 else if (x < 30) 2 else 3)
}
mews_temperatura <- function(temperatura.t.){
sapply(temperatura.t., function(x) if (x == 0) 0 else if (x < 35) 2 else if (x <= 38.4) 0  else 2)
}
pa_sistolica_score <- mews_pa_sistolica(dados$pa_sistolica.t.)
head(dados$pa_sistolica.t.)
summary(dados$pa_sistolica.t.)
dados$pa_sistolica.t.[is.na(dados$pa_sistolica.t.)] <- 0
dados$freq_cardiaca.t.[is.na(dados$freq_cardiaca.t.)] <- 0
dados$freq_respiratoria.t.[is.na(dados$freq_respiratoria.t.)] <- 0
dados$temperatura.t.[is.na(dados$temperatura.t.)] <- 0
mews_pa_sistolica <- function(pa_sistolica.t.){
sapply(pa_sistolica.t., function(x) if (x == 0) 0 else if (x <= 70) 3 else if (x <= 80) 2 else if (x <= 100) 1 else if (x < 200) 0 else 0)
}
mews_freq_cardiaca <- function(freq_cardiaca.t.){
sapply(freq_cardiaca.t., function(x) if (x == 0) 0 else if (x <= 40) 2 else if (x <= 50) 1 else if (x <= 100) 0 else if (x <= 110) 1  else if (x < 130) 2 else 3)
}
mews_freq_respiratoria <- function(freq_respiratoria.t.){
sapply(freq_respiratoria.t., function(x) if (x == 0) 0 else if (x < 9) 2 else if (x <= 14) 0 else if (x <= 20) 1 else if (x < 30) 2 else 3)
}
mews_temperatura <- function(temperatura.t.){
sapply(temperatura.t., function(x) if (x == 0) 0 else if (x < 35) 2 else if (x <= 38.4) 0  else 2)
}
pa_sistolica_score <- mews_pa_sistolica(dados$pa_sistolica.t.)
freq_cardiaca_score <- mews_freq_cardiaca(dados$freq_cardiaca.t.)
freq_respiratoria_score <- mews_freq_respiratoria(dados$freq_respiratoria.t.)
temperatura_score <- mews_temperatura(dados$temperatura.t.)
dados$mews_score <- pa_sistolica_score + freq_cardiaca_score + freq_respiratoria_score + temperatura_score
names(dados)
head(dados[,c(5,88)])
tail(dados[,c(5,88)])
head(dados)
#### Matriz de confusão MEWS
dados$pred_mews<-ifelse(dados$mews_score>=3,1,0)
t1_mews <- confusion.matrix(dados$alta_motivo, dados$pred_mews)
library(SDMTools)
install.packages('SDMTools')
devtools::install_github("jjvanderwal/SDMTools")
#### Matriz de confusão MEWS
library(SDMTools) ## Para instalar devtools::install_github("jjvanderwal/SDMTools")
dados$pred_mews<-ifelse(dados$mews_score>=3,1,0)
t1_mews <- confusion.matrix(dados$alta_motivo, dados$pred_mews)
tn_mews <- t1_mews[1]
fp_mews <- t1_mews[2]
fn_mews <- t1_mews[3]
tp_mews <- t1_mews[4]
tpr_mews  <-  tp_mews / (tp_mews + fn_mews)
fpr_mews  <-  fp_mews / (fp_mews + tn_mews)
tnr_mews  <-  tn_mews / (tn_mews + fp_mews)
fnr_mews  <-  fn_mews / (fn_mews + tp_mews)
tpr_mews
fpr_mews
tnr_mews
fnr_mews
# Aplicando o teste KS
sketch = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(class = 'dt-center',rowspan = 2, 'Métricas'),
th(class = 'dt-center',colspan = 2, 'Ponto de corte')
),
tr(
lapply(rep(c(paste0(roc_pc$threshold), paste0(dados$alert_threshold[1]),'Mews'), 1), th)
)
)
))
ks_sem1<-ks.test(sim_sem1$probability,nao_sem1$probability)
#### Valores em Tabela
tab_auc_ks <- data.frame(
AUCROC = c(round(roc_sem1$auc,3)),
KS = c(round(ks_sem1$stat,3)),
Acur = c(round(ac_sem1,3)),
Especificidade = c(round(esp_sem1,3)),
Sensibilidade = c(round(sen_sem1,3)),
vpp = c(round(vpp_sem1,3)),
vpn = c(round(vpn_sem1,3)),
Score_F1 = c(round(F1_sem1,3))
)
matconf = t(tab_auc_ks)
D2 = c(round(roc_sem1$auc,3),round(ks_sem1$stat,3),round(ac_sem.5,3),round(esp_sem.5,3),round(sen_sem.5,3),round(vpp_sem.5,3),round(vpn_sem.5,3),round(F1_sem.5,3))
matconf.51 = cbind(matconf,D2)
############# Tab
datatable(matconf.51,container = sketch,
options = list(orderClasses = TRUE,searching = FALSE,paging = FALSE,ordering=FALSE,info=FALSE,
columnDefs = list(list(className = 'dt-center', targets = "_all"))),
colnames = c("Métricas",as.character(round(roc_pc$threshold,3)),"0.5"),
rownames = c("AUCROC","KS","Acurácia","Especificidade","Sensibilidade","Valor preditivo positivo","Valor preditivo negativo","Score F1"),
editable = FALSE,filter = "none",selection = "none",escape = FALSE)
D2
tpr_mews
tnr_mews
esp_mews <- tn_mews/(tn_mews+fp_mews)
esp_mews
esp_mews <- tn_mews/(tn_mews+fp_mews)
sen_mews <- tp_mews/(tp_mews+fn_mews)
vpp_mews <- tp_mews/(tp_mews+fp_mews)
vpn_mews <- tn_mews/(tn_mews+fn_mews)
F1_mews <- 2*((vpp_mews*sen_mews)/(vpp_mews + sen_mews))
F1_mews
tab_auc_ks
tab_auc_ks
matconf.51
ac_mews <- (tp_mews + tn_mews)/(tp_mews + tn_mews + fp_mews + fn_mews)
ac_mews
D3 <- c(NA,NA,round(ac_mews,3),round(esp_mews,3),round(sen_mews,3),round(vpp_mews,3),round(vpn_mews,3),round(F1_mews,3))
D3
matconf.51 = cbind(matconf,D2,D3)
matconf.51
############# Tab
datatable(matconf.51,container = sketch,
options = list(orderClasses = TRUE,searching = FALSE,paging = FALSE,ordering=FALSE,info=FALSE,
columnDefs = list(list(className = 'dt-center', targets = "_all"))),
colnames = c("Métricas",as.character(round(roc_pc$threshold,3)),"0.5"),
rownames = c("AUCROC","KS","Acurácia","Especificidade","Sensibilidade","Valor preditivo positivo","Valor preditivo negativo","Score F1"),
editable = FALSE,filter = "none",selection = "none",escape = FALSE)
str(dados)
setwd("~/Documentos/UTFPR/Extensão_ML/Slides")
ls()
rm(list=ls())
getwd()
knitr::opts_chunk$set(echo = FALSE,
comment = NA,
warning = FALSE,
message = FALSE,
size = "footnotesize",
tidy = TRUE,
cache = TRUE)
library(dplyr)
h <- read.csv('hospital.csv',
h=TRUE,
sep = '\t')
h <- read.csv('Dados/hospital.csv',
h=TRUE,
sep = '\t')
summary(h)
plot_missing(dados[,3:8])
#load('Dados/dados_all.RData')
library(DataExplorer)
plot_missing(dados[,3:8])
plot_missing(h[,3:8])
table(h$sat_o2, h$alta.motivo, useNA = 'always')
table(h$sat_o2, h$sexo, useNA = 'always')
table(h$sat_o2, h$setor, useNA = 'always')
h$setor2 <- ifelse(h$setor %in% c( 'UTIC',
'UTIG',
'UTIP'),
'UTI',
'Enfermaria')
table(h$setor2)
table(h$setor)
66        174         34
>  66        174         34
> 66+147+34
66        174         34
>  66        174         34
> 66+147+34
66        174         34
>  66        174         34  66+147+34
66+147+34
66+174+34
table(h$sat_o2, h$setor2)
table(h$sat_o2, h$setor2,useNA='alwyas')
table(h$sat_o2, h$setor2,useNA='alwyays')
table(h$sat_o2, h$setor2,useNA='always')
ggplot(h,
aes(y = factor(setor2),
x = sat_o2,
color = setor2)) +
geom_jitter(alpha = 0.7,
size = 1.5) +
#scale_x_continuous(label = dados$idade) +
labs(#title = "Academic Salary by Rank",
#subtitle = "9-month salary for 2008-2009",
x = "Temperatura em graus Celsius",
y = "") +
theme_minimal()# +
library(ggplot2)
ggplot(h,
aes(y = factor(setor2),
x = sat_o2,
color = setor2)) +
geom_jitter(alpha = 0.7,
size = 1.5) +
#scale_x_continuous(label = dados$idade) +
labs(#title = "Academic Salary by Rank",
#subtitle = "9-month salary for 2008-2009",
x = "Temperatura em graus Celsius",
y = "") +
theme_minimal()# +
library(knitr)
knitr::opts_chunk$set(echo = FALSE,
comment = NA,
warning = FALSE,
message = FALSE,
size = "footnotesize",
tidy = TRUE,
cache = TRUE)
library(dplyr)
d <- read.csv('Dados/predictions_nuti5_from_01_01_2019_to_28_02_2019.csv',
header =TRUE,
sep=',')
d2 <- d[,c(16,18)]
head(d2)
head(d)
d2$pred<-ifelse(d2$ml>0.5,1,0)
library(SDMTools)
# Definindo a matriz de confusão
t1<-confusion.matrix(d$discharge_reason, d$pred)
# Definindo a matriz de confusão
t1<-confusion.matrix(d2$discharge_reason,
d2$pred)
t1
names(t1)
t1[4]
t1[3]
t1[1]
t1[2]
t1[4]
t1[2]
mcc <- mccr(d$discharge_reason, d$pred)
mcc <- mccr(d2$discharge_reason, d2$pred)
install.packages('mccr')
library(mccr)
mcc <- mccr(d2$discharge_reason, d2$pred)
paste0('mcc=',round(mcc,4))
library(pROC)
head(d2)
rocobj <- roc(d2$discharge_reason, d2$pred)
gl <- ggroc(rocobj, legacy.axes = TRUE,color='#d07530')
auc <- round(rocobj$auc,4)
temp <- paste('AUC=', auc)
gl<-gl+ annotate("text", x = .75, y = .25,colour = "#d07530", size=6, label= temp, parse=TRUE)
library(ggplot2)
gl<-gl + annotate("text", x = .75, y = .25,colour = "#d07530", size=6, label= temp, parse=TRUE)
gl + xlab("FPR") + ylab("TPR") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color='#d07530', linetype="dashed")
rocobj <- roc(d2$discharge_reason, d2$ml)
gl <- ggroc(rocobj, legacy.axes = TRUE,color='#d07530')
auc <- round(rocobj$auc,4)
temp <- paste('AUC=', auc)
gl<-gl + annotate("text", x = .75, y = .25,colour = "#d07530", size=6, label= temp, parse=TRUE)
gl + xlab("FPR") + ylab("TPR") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color='#d07530', linetype="dashed")
gl <- ggroc(rocobj, legacy.axes = TRUE,color='#d07530')
auc <- round(rocobj$auc,4)
temp <- paste('AUC=', auc)
gl<-gl + annotate("text", x = .75, y = .25,colour = "#d07530", size=6, label= temp, parse=TRUE)
gl + xlab("FPR") + ylab("TPR") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color='#d07530', linetype="dashed") +
theme(legend.title=element_blank())
gl <- ggroc(rocobj, legacy.axes = TRUE,color='#d07530')
auc <- round(rocobj$auc,4)
temp <- paste('AUC=', auc)
gl<-gl + annotate("text", x = .75, y = .25,colour = "#d07530", size=6, label= temp, parse=TRUE)
gl + xlab("FPR") + ylab("TPR") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color='#d07530', linetype="dashed") +
theme_bw(base_size = 10)
knitr::opts_chunk$set(echo = FALSE,
comment = NA,
warning = FALSE,
message = FALSE,
size = "footnotesize",
tidy = TRUE,
cache = TRUE)
library(dplyr)
# Diagrama de dispersão
# Plotando todos no mesmo gráfico
par(mfrow=c(2,3))
# Correlação perfeita positiva
x<-seq(-100, 100)
y1<-x*2.53
plot(x, y1, main = "Correlação perfeita positiva",ylab = "y",col="blue")
# Correlação perfeita negativa
x<-seq(-100, 100)
y2<- -x*2.53
plot(x, y2, main = "Correlação perfeita positiva",ylab = "y",col="blue")
# Alta correlação positiva
y3<-rnorm(y1,y1,20)
plot(x,y3,main="Alta correlação positiva",ylab = "y",col="blue")
# Alta correlação
y4<-rnorm(y1,(-1)*y1,20)
plot(x,y4,main="Alta correlação negativa",ylab = "y",col="blue")
# Baixa correlação positiva
y5<-rnorm(y1,y1,500)
plot(x,y5,main="Baixa correlação",ylab = "y",col="blue")
# Correlação não linear
y6<- rnorm(x, x^2, 1000)
plot(x,y6,main="Correlação não linear",ylab = "y",col="blue")
# Alta correlação positiva
y3<-rnorm(y1,y1,20)
plot(x,y3,main="Alta correlação positiva",ylab = "y",col="blue")
# Correlação perfeita negativa
x<-seq(-100, 100)
y2<- -x*2.53
plot(x, y2, main = "Correlação perfeita positiva",ylab = "y",col="blue")
#source("setup_knitr.R")
knitr::opts_chunk$set(echo = TRUE,
comment = NA,
warning = FALSE,
message = FALSE)
dados <- read.csv('Dados/hospital.csv',
h = TRUE,
sep = '\t')
getwd()
url <- 'https://felipebarletta.github.io/DAEST/hospital.csv'
dados <- read.csv(url,
h = TRUE,
sep = '\t')
library(ggplot2)
ggplot(dados, aes(idade, fill = alta.motivo, colour = alta.motivo)) +
geom_density(alpha= 0.1, fill = 'white') +
xlab('Idade em anos') +
ylab('Densidade') +
theme_minimal()
load('Dados/vs.RData')
names(vs)
length(vs$atendimento_id)
length(unique(vs$atendimento_id))
head(vs)
vs <- arrange(vs, vs$atendimento_id)
head(vs)
tail(vs)
tail()
tail(vs)
head(vs$atendimento_id,100)
head(vs[32:40,])
load('Dados/dados3.RData')
head(dados3)
## Carregando os dados
load('dados2.RData')
## Formatando a data
dados2$data <- as.Date(dados2$date,
format = "%Y-%m-%d",
origin="2016-01-01")
ls()
library(ggplot2)
library(cowplot)
library(timetk)
library(timetk)
library(tidyquant)
library(tibbletime)
# Axis limits c(min, max)
min <- min(df$Dia)
# Axis limits c(min, max)
min <- min(df$Dia)
## Carregando os dados
load('dados3.RData')
## Formatando a data
dados3$data <- as.Date(dados3$date,
format = "%Y-%m-%d",
origin="2016-01-01")
## Filtrando apenas classes óbito(1)
dados4 <- dados3 %>%
filter(alta.motivo == 1)
df <- data.frame(table(dados4$data))
colnames(df) <- c('Dia','Quantidade')
df$Dia <- as.Date(df$Dia,
format = "%Y-%m-%d",
origin="2016-01-01")
head(df)
# Axis limits c(min, max)
min <- min(df$Dia)
max <- max(df$Dia)
seg <-as.Date(min+480)
df <- as_tbl_time(df,index = Dia)
#### zoom
v3 <- ggplot(aes(x=Dia, y=Quantidade)) +
geom_line(color = palette_light()[[1]], alpha = 0.5, size=1) +
geom_point(color = palette_light()[[1]]) +
geom_smooth(method = "loess", span = 0.2, se = TRUE, colour='darkorange') +
theme_tq() +
labs(title = "",
caption = "")  + xlab("Dias") + ylab("Quantidade de Óbitos")
#### zoom
v3 <- df %>%
ggplot(aes(x=Dia, y=Quantidade)) +
geom_line(color = palette_light()[[1]], alpha = 0.5, size=1) +
geom_point(color = palette_light()[[1]]) +
geom_smooth(method = "loess", span = 0.2, se = TRUE, colour='darkorange') +
theme_tq() +
labs(title = "",
caption = "")  + xlab("Dias") + ylab("Quantidade de Óbitos")
v3
# Axis limits c(min, max)
min <- min(df$Dia)
max <- max(df$Dia)
seg <-as.Date(min+480)
df <- as_tbl_time(df,index = Dia)
#### zoom
v3 <- df %>%
filter_time("2017-01-01" ~ "2018-12-31") %>%
ggplot(aes(x=Dia, y=Quantidade)) +
geom_line(color = palette_light()[[1]], alpha = 0.5, size=1) +
geom_point(color = palette_light()[[1]]) +
geom_smooth(method = "loess", span = 0.2, se = TRUE, colour='darkorange') +
theme_tq() +
labs(title = "01/01/2017 à 31/12/2018",
caption = "")  +
xlab("Dias") +
ylab("Quantidade de Óbitos")
v3
library(tidyquant)
getwd()
setwd("~/ML")
library(rmarkdown)
render_site()
